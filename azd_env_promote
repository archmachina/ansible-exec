#!/bin/bash

# Global settings
SCRIPT=`readlink -f "$0"`
DIR=`dirname "${SCRIPT}"`
set -o pipefail

########
# Setup

# Ensure relevant commands are available
which az > /dev/null
if [ $? -ne 0 ] ; then
  echo "Azure CLI is not installed"
  exit 1
fi

which git > /dev/null
if [ $? -ne 0 ] ; then
  echo "git is not installed"
  exit 1
fi

########
# Process inputs

# First argument is the map and the second is the current environment
PROMOTE_MAP="$1"
shift
SOURCE_ENV="$1"

# Determine the target environment
TARGET_ENV=`${DIR}/next_environment "${PROMOTE_MAP}" "${SOURCE_ENV}"`
if [ $? -ne 0 ] ; then
  echo "Failed to determine the target environment: $TARGET_ENV"
  exit 1
fi

if [ "$TARGET_ENV" == "" ] ; then
  echo "No target environment to promote to"
  exit 0
fi

# Display information on environments
echo "Promote Map:"
echo "${PROMOTE_MAP}" | jq -eM
echo ""
echo "Source Environment: ${SOURCE_ENV}"
echo "Target Environment: $TARGET_ENV"
echo ""

# Make sure we have the azure-devops extension installed
echo ""
echo "Ensuring azure-devops azcli extension is present"
az extension add --name azure-devops
if [ $? -ne 0 ] ; then
  echo "Could not install azure-devops extension"
  exit 1
fi

########
# Git information

# If this is a shallow clone, convert to a normal clone
echo "Unshallow git repo"
git fetch --unshallow

# Fetching other branches and commits
echo "Fetching additional branches and commits"
git fetch --all || exit 1

# Check if we have changes to promote
git diff --exit-code "origin/${SOURCE_ENV}" "origin/${TARGET_ENV}"
if [ $? -eq 0 ] ; then
  echo "No changes from source to target. Not creating PR."
  exit 0
fi

# Generate the description
SOURCE_COMMITS=`git log --no-merges --no-decorate --oneline "origin/${SOURCE_ENV}" "^origin/${TARGET_ENV}" | head -20`
TARGET_COMMITS=`git log --no-merges --no-decorate --oneline "origin/${TARGET_ENV}" "^origin/${SOURCE_ENV}" | head -20`
DESCRIPTION="
Promotion Details:
\`\`\`
Source Branch: $SOURCE_ENV
Target Branch: $TARGET_ENV
\`\`\`

Change to promote (last 20):
\`\`\`
${SOURCE_COMMITS}
\`\`\`

Changes in target, but not in source (last 20):
\`\`\`
${TARGET_COMMITS}
\`\`\`
"
echo "PR Description:"
echo "${DESCRIPTION}"

# Attempt to create a PR from the source to the target. Ignore failure as it
# may already exist. If it's a failure for another reason, we'll catch that later.
echo "Attempting to create PR - Ignore failure"
az repos pr create --detect -s "${SOURCE_ENV}" -t "${TARGET_ENV}" --squash false \
  --title "Promote ${SOURCE_ENV} to ${TARGET_ENV}" --description "${DESCRIPTION}"

# Retrieve the PR, which we may have created or may have already existed
echo "Retrieving PR for promotion"
PR_ID=`az repos pr list -s "${SOURCE_ENV}" -t "${TARGET_ENV}" | jq '.[0].pullRequestId'`
if [ $? -ne 0 ] ; then
  echo "Failed to retrieve the ID for the promotion PR"
  exit 1
fi

# Update the description on the PR
az repos pr update --id "$PR_ID" --description "${DESCRIPTION}"
if [ $? -ne 0 ] ; then
  echo "Failed to update PR description"
  exit 1
fi
