#!/bin/bash

# Global settings
set -o pipefail

# Support functions

SEMVER_REGEX='^(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)(-((0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*)(\.(0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*))*))?(\+([0-9a-zA-Z-]+(\.[0-9a-zA-Z-]+)*))?$'

function github_release() {
  GITHUB_GENERATE_NOTES='false'

  while getopts "o:r:a:t:d:p:n:gh" opt ; do
    case "${opt}" in
      o)
        GITHUB_OWNER="${OPTARG}"
        ;;
      r)
        GITHUB_REPO="${OPTARG}"
        ;;
      a)
        GITHUB_AUTH="${OPTARG}"
        ;;
      t)
        GITHUB_TAG="${OPTARG}"
        ;;
      d)
        GITHUB_DRAFT="${OPTARG}"
        ;;
      p)
        GITHUB_PRERELEASE="${OPTARG}"
        ;;
      n)
        GITHUB_RELEASE_NAME="${OPTARG}"
        ;;
      g)
        GITHUB_GENERATE_NOTES='true'
        ;;
      h)
        cat <<_EOF_
Usage: github_release

-o owner                GitHub owner/organisation
-r repo_name            GitHub repository name
-a auth_token           Authentication token for GitHub
-t tag_name             Git tag name
-d (true|false)         GitHub draft release
-p (true|false)         GitHub prerelease
-n release_name         Release name
-g (true|false)         Generate notes
_EOF_
        ;;
      *)
        echo "Unknown option ($opt)"
        return 1
        ;;
    esac
  done

  if [ "$GITHUB_OWNER" == "" ] ; then
    echo "GITHUB_OWNER (o) is empty"
    return 1
  fi

  if [ "$GITHUB_REPO" == "" ] ; then
    echo "GITHUB_REPO (r) is empty"
    return 1
  fi

  if [ "$GITHUB_AUTH" == "" ] ; then
    echo "GITHUB_AUTH (a) is empty"
    return 1
  fi

  if [ "$GITHUB_TAG" == "" ] ; then
    echo "GITHUB_TAG (t) is empty"
    return 1
  fi

  if [ "$GITHUB_DRAFT" == "" ] ; then
    echo "GITHUB_DRAFT (d) is empty"
    return 1
  fi

  if [ "$GITHUB_DRAFT" != "true" ] && [ "$GITHUB_DRAFT" != "false" ]; then
    echo "GITHUB_DRAFT (d) must be 'true' or 'false'"
    return 1
  fi

  if [ "$GITHUB_PRERELEASE" == "" ] ; then
    echo "GITHUB_PRERELEASE (p) is empty"
    return 1
  fi

  if [ "$GITHUB_PRERELEASE" != "true" ] && [ "$GITHUB_PRERELEASE" != "false" ]; then
    echo "GITHUB_PRERELEASE (d) must be 'true' or 'false'"
    return 1
  fi

  if [ "$GITHUB_RELEASE_NAME" == "" ] ; then
    echo "GITHUB_RELEASE_NAME (n) is empty"
    return 1
  fi

  GITHUB_DATA=$(cat <<_EOF_
{
  "tag_name": "${GITHUB_TAG}",
  "name": "${GITHUB_RELEASE_NAME}",
  "draft": ${GITHUB_DRAFT},
  "prerelease": ${GITHUB_PRERELEASE},
  "generate_release_notes": ${GITHUB_GENERATE_NOTES}
}
_EOF_
)
  echo "Post data: ${GITHUB_DATA}"
  if ! curl --fail-with-body -X POST "https://api.github.com/repos/${GITHUB_OWNER}/${GITHUB_REPO}/releases" \
    -H "Accept: application/vnd.github.v3+json" \
    -H "Authorization: token ${GITHUB_AUTH}" \
    -H "Content-Type: application/json" \
    -H "X-GitHub-Api-Version: 2022-11-28" \
    -d "$GITHUB_DATA" ; then

    echo "Failed to create GitHub release"
    return 1
  fi

  return 0
}

function assert() {
  echo "Asserting: $*" >&2
  if ! "$@" ; then
    echo "assertion ($*) failed" >&2
    exit 1
  fi

  return 0
}

function assert_msg() {
  MSG="$1"
  shift

  echo "Asserting: ($MSG) $*" >&2
  if ! "$@" ; then
    echo "assertion ($MSG) ($*) failed" >&2
    exit 1
  fi

  return 0
}

function semver_strip() {
  VER="$1"

  # Strip git tag reference, if present
  VER="${VER#refs/tags/}"

  # Strip leading 'v', if present
  VER="${VER#v}"

  echo "$VER"
}

function get_semver_match() {
  # Read a potential match per line on stdin
  while read -r LINE ; do
    [ "$LINE" == "" ] && continue

    # Strip allowed leading characters
    ORIG="${LINE}"
    LINE=$(semver_strip "$LINE")

    if [[ "${LINE}" =~ $SEMVER_REGEX ]] ; then
      # line matches
      echo "${ORIG}"

      return 0
    fi
  done

  # no items matched
  return 1
}

function semver_extract() {
  VER="$1"

  # Strip allowed leading characters
  ORIG="${VER}"
  VER=$(semver_strip "$VER")

  if [[ "$VER" =~ $SEMVER_REGEX ]] ; then
    # Match for regex

    export SEMVER_ORIG="${ORIG}"
    export SEMVER_FULL="${BASH_REMATCH[0]}"
    export SEMVER_MAJOR="${BASH_REMATCH[1]}"
    export SEMVER_MINOR="${BASH_REMATCH[2]}"
    export SEMVER_PATCH="${BASH_REMATCH[3]}"
    export SEMVER_PRERELEASE="${BASH_REMATCH[5]}"
    export SEMVER_BUILDMETA="${BASH_REMATCH[10]}"

    # Make sure we have content for the mandatory components
    if [ "${SEMVER_FULL}" == "" ] || [ "${SEMVER_MAJOR}" == "" ] || [ "${SEMVER_MINOR}" == "" ] || [ "${SEMVER_PATCH}" == "" ] ; then
      echo "Failed to extract mandatory components of semver version"
      return 1
    fi

    return 0
  else
    # not a valid semver string
    echo "Not a valid semver version ($VER)"
    return 1
  fi
}

function next_env() {
  # Setup
  if ! which jq > /dev/null 2>&1 ; then
    echo "jq is not installed"
    return 1
  fi

  # Process command line arguments
  PROMOTE_MAP="$1"
  if [ "$PROMOTE_MAP" == "" ] ; then
    echo "Empty or missing promote map"
    return 1
  fi

  SOURCE_ENV="$2"
  if [ "$SOURCE_ENV" == "" ] ; then
    echo "Empty or missing source environment"
    return 1
  fi

  # Validate the promote map
  if ! RESULT=$(echo "${PROMOTE_MAP}" | jq -eMr 2>&1) ; then
    echo "Promote map is not formatted correctly:"
    echo "$PROMOTE_MAP"
    echo "$RESULT"
    return 1
  fi

  # Check if the source environment is present
  if ! RESULT=$(echo "${PROMOTE_MAP}" | jq -eMr "has(\"${SOURCE_ENV}\")" 2>&1) ; then
    # The source environment is not present, so there is no next environment
    echo ""
    return 0
  fi

  # Determine next environment
  if ! TARGET_ENV=$(echo "${PROMOTE_MAP}" | jq -eMr ."${SOURCE_ENV}") ; then
    echo "Failed to determine the target environment: $TARGET_ENV"
    return 1
  fi

  echo "$TARGET_ENV"

  return 0
}

function azd_env_promote() {
  # Ensure relevant commands are available
  if ! which az > /dev/null 2>&1 ; then
    echo "Azure CLI is not installed"
    return 1
  fi

  if ! which git > /dev/null 2>&1 ; then
    echo "git is not installed"
    return 1
  fi

  ########
  # Process inputs

  # First argument is the map and the second is the current environment
  PROMOTE_MAP="$1"
  SOURCE_ENV="$2"

  # Determine the target environment
  if ! TARGET_ENV=$(next_env "${PROMOTE_MAP}" "${SOURCE_ENV}") ; then
    echo "Failed to determine the target environment: $TARGET_ENV"
    return 1
  fi

  if [ "$TARGET_ENV" == "" ] ; then
    echo "No target environment to promote to"
    return 0
  fi

  # Display information on environments
  echo "Promote Map:"
  echo "${PROMOTE_MAP}" | jq -eM
  echo ""
  echo "Source Environment: ${SOURCE_ENV}"
  echo "Target Environment: $TARGET_ENV"
  echo ""

  # Make sure we have the azure-devops extension installed
  echo ""
  echo "Ensuring azure-devops azcli extension is present"
  if ! az extension add --name azure-devops ; then
    echo "Could not install azure-devops extension"
    return 1
  fi

  ########
  # Git information

  # If this is a shallow clone, convert to a normal clone
  echo "Unshallow git repo"
  git fetch --unshallow

  # Fetching other branches and commits
  echo "Fetching additional branches and commits"
  git fetch --all || return 1

  # Check if we have changes to promote
  echo "Checking for changes between branches"
  if git diff --exit-code "origin/${SOURCE_ENV}" "origin/${TARGET_ENV}" >/dev/null 2>&1 ; then
    echo "No changes from source to target. Not creating PR."
    return 0
  fi

  # Generate the description
  SOURCE_COMMITS=$(git log --no-merges --no-decorate --oneline "origin/${SOURCE_ENV}" "^origin/${TARGET_ENV}" | head -20)
  TARGET_COMMITS=$(git log --no-merges --no-decorate --oneline "origin/${TARGET_ENV}" "^origin/${SOURCE_ENV}" | head -20)
  DESCRIPTION="
Promotion Details:
\`\`\`
Source Branch: $SOURCE_ENV
Target Branch: $TARGET_ENV
\`\`\`

Change to promote (last 20):
\`\`\`
${SOURCE_COMMITS}
\`\`\`

Changes in target, but not in source (last 20):
\`\`\`
${TARGET_COMMITS}
\`\`\`
"
  echo "PR Description:"
  echo "${DESCRIPTION}"

  # Attempt to create a PR from the source to the target. Ignore failure as it
  # may already exist. If it's a failure for another reason, we'll catch that later.
  echo "Attempting to create PR - Ignore failure"
  az repos pr create --detect -s "${SOURCE_ENV}" -t "${TARGET_ENV}" --squash false \
    --title "Promote ${SOURCE_ENV} to ${TARGET_ENV}" --description "${DESCRIPTION}"

  # Retrieve the PR, which we may have created or may have already existed
  echo "Retrieving PR for promotion"
  if ! PR_ID=$(az repos pr list -s "${SOURCE_ENV}" -t "${TARGET_ENV}" | jq -eMr '.[0].pullRequestId') ; then
    echo "Failed to retrieve the ID for the promotion PR"
    return 1
  fi

  # Update the description on the PR
  echo "Updating PR description"
  if ! az repos pr update --id "$PR_ID" --description "${DESCRIPTION}" ; then
    echo "Failed to update PR description"
    return 1
  fi

  echo "Finished promotion PR"

  return 0
}

function ansible_setup() {
  PLAYBOOK_DIR="$1"

  # Check we have a directory to work with
  if [ "$PLAYBOOK_DIR" == "" ] ; then
    echo "Ansible playbook directory not supplied"
    return 1
  fi

  if ! PLAYBOOK_DIR=$(readlink -f "$PLAYBOOK_DIR") ; then
    echo "Could not resolve playbook directory to full path"
    return 1
  fi

  if [ ! -d "$PLAYBOOK_DIR" ] ; then
    echo "Ansible playbook directory does not exist or is not a directory"
    return 1
  fi

  echo ""
  echo "Ansible environment setup: $PLAYBOOK_DIR"
  echo "----------------"
  echo ""

  # Temporarily move in to ansible playbook dir
  STARTDIR=$(pwd)
  if ! cd "$PLAYBOOK_DIR" ; then
    echo "Could not change in to ansible playbook directory: $PLAYBOOK_DIR"
    return 1
  fi

  # Configure ANSIBLE_HOME
  export ANSIBLE_HOME="${PLAYBOOK_DIR}/.ansible"
  if [ ! -d "${ANSIBLE_HOME}" ] ; then
    echo "ANSIBLE_HOME ($ANSIBLE_HOME) does not exist. Creating."
    if ! mkdir -p "${ANSIBLE_HOME}" ; then
      echo "Failed to create ANSIBLE_HOME"
      return 1
    fi
  fi

  # Configure ANSIBLE_CONFIG
  export ANSIBLE_CONFIG="${PLAYBOOK_DIR}/ansible.cfg"
  if [ ! -f "${ANSIBLE_CONFIG}" ] ; then
    echo "Missing ansible.cfg file: ${ANSIBLE_CONFIG}"
    return 1
  fi

  # Set up venv for ansible
  if ! python3 -m venv "${PLAYBOOK_DIR}/env" ; then
    echo "Failed to set up python3 virtual environment in ${PLAYBOOK_DIR}/env"
    return 1
  fi

  # Activate the python environment
  # shellcheck disable=SC1091
  if ! source "${PLAYBOOK_DIR}/env/bin/activate" ; then
    echo "Failed to source python environment from ${PLAYBOOK_DIR}/env/bin/activate"
    return 1
  fi

  if [ ${ANSIBLE_INSTALL_DEPS:-1} -eq 1 ] ; then
    echo "Installing dependencies for ansible environment"

    # Pip configuration for the virtual environment
    echo ""
    echo "Configuring pip"
    echo "----------------"
    if ! python3 -m pip install --upgrade pip ; then
      echo "Failed to perform pip install"
      return 1
    fi

    # Install python dependencies
    echo ""
    echo "Installing python dependencies"
    echo "----------------"
    if ! python3 -m pip install -r requirements.txt ; then
      echo "Failed to perform pip install from requirements.txt"
      return 1
    fi

    if ! python3 -m pip list ; then
      echo "Failed to perform pip list"
      return 1
    fi

    # Install any ansible collections required
    echo ""
    echo "Installing ansible collections"
    echo "----------------"
    if [ ! -d "${ANSIBLE_HOME}/collections" ] ; then
      echo "Ansible collections directory does not exist. Creating."
      if ! mkdir -p "${ANSIBLE_HOME}/collections" ; then
        echo "Failed to create ansible collections directory"
        return 1
      fi
    fi

    echo "Installing ansible galaxy collections"
    if ! ansible-galaxy collection install -r requirements.yml ; then
      echo "Failed to perform ansible galaxy collection install"
      return 1
    fi

    if ! ansible-galaxy collection list ; then
      echo "Failed to perform ansible galaxy collection list"
      return 1
    fi

    # Install any ansible roles required
    echo ""
    echo "Installing ansible roles"
    echo "----------------"
    if [ ! -d "${ANSIBLE_HOME}/roles" ] ; then
      echo "Ansible roles directory does not exist. Creating."
      if ! mkdir -p "${ANSIBLE_HOME}/roles" ; then
        echo "Failed to create ansible roles directory"
        return 1
      fi
    fi

    echo "Installing ansible galaxy roles"
    if ! ansible-galaxy role install -r requirements.yml ; then
      echo "Failed to perform ansible roles install from requirements.yml"
      return 1
    fi

    if ! ansible-galaxy role list ; then
      echo "Failed to perform ansible galaxy role list"
      return 1
    fi
  fi

  # Move back to the starting directory
  if ! cd "$STARTDIR" ; then
    echo "Could not move back to the starting directory ($STARTDIR)"
    return 1
  fi
}

function ansible_playbook() {

  PLAYBOOK="$1"
  shift

  # Determine playbook file and playbook directory
  if [ "$PLAYBOOK" == "" ] ; then
    echo "Ansible playbook not supplied as argument"
    return 1
  fi

  if ! PLAYBOOK=$(readlink -f "$PLAYBOOK") ; then
    echo "Could not resolve playbook to full path"
    return 1
  fi

  if [ ! -f "$PLAYBOOK" ] ; then
    echo "Playbook does not exist or is not a file"
    return 1
  fi

  if ! PLAYBOOK_DIR=$(dirname "${PLAYBOOK}") ; then
    echo "Could not determine playbook directory"
    return 1
  fi

  echo ""
  echo "Ansible playbook: $PLAYBOOK"
  echo "----------------"
  echo ""

  # Set up ansible environment
  if ! ansible_setup "$PLAYBOOK_DIR" ; then
    echo "Failed to resolve ansible dependencies"
    return 1
  fi

  # Display runtime information
  echo ""
  echo "Ansible runtime information"
  echo "----------------"
  echo "ANSIBLE_CONFIG: ${ANSIBLE_CONFIG}"
  echo "ANSIBLE_HOME: ${ANSIBLE_HOME}"
  echo "Ansible Install Location: $(which ansible-playbook)"
  echo ""
  echo "Ansible-Playbook Version: "
  ansible-playbook --version
  echo ""

  # Start ansible playbook
  echo "Starting ansible playbook"
  echo "----------------"
  ansible-playbook "${PLAYBOOK}" "$@"

  return $?
}
